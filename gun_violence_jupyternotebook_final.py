# -*- coding: utf-8 -*-
"""Gun Violence JupyterNotebook Final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t626oWhgQYsJMTe2ii1lqz-QO7LMYOK7
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

"""Here, I am just importing the libraries I will be using"""

# Commented out IPython magic to ensure Python compatibility.

import pandas as pd
pd.plotting.register_matplotlib_converters()
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
print("Setup Complete")
import numpy as np
import descartes 
from shapely.geometry import Point, Polygon

# %matplotlib inline

!pip install geopandas
!pip install descartes
!pip install pysal

!pip install pyshp==1.2.10
!pip install shapely==1.6.3

!pip install chart_studio

import geopandas as gpd
import shapely.geometry 
from shapely.wkt import loads
from shapely.geometry import Point
import chart_studio.plotly as py 
import plotly.tools as tls

map = gpd.read_file("/stage3.csv")
map.head()

"""Here, I am opening up the data set and making sure everything looks good and the data is complete. 

"""



map['latitude']

map['latitude'] = pd.to_numeric(map['latitude'],errors='coerce')
map['longitude'] = pd.to_numeric(map['longitude'],errors='coerce')

"""First, I am looking at just the latitude data and seeing what the type of data it is. The latitude seems to be an object, so in the second code box I am converting both the latitude and longitude to numeric values, in order to use them later on. """

map.head()

gdf =  gpd.GeoDataFrame(
    map, geometry=gpd.points_from_xy(map.longitude, map.latitude))

"""In this code box, I am using GeoPandas to set a data frame with the longitude and latitude coordinates from the data set. """

fig,ax = plt.subplots(figsize = (100,100))
ax.set(title = "Incident Report Locations")
ax.xaxis.get_label().set_fontsize(60)
map.plot(ax=ax)

"""In this code box, I am using Matplotlib to plot all of the coordinates of the data set to get a visualization of where the most gun violence-related crimes were reported. """



"""# New Section

Here, I am importing even more libraries.
"""

gun_violence = "/DATA_01-2013_03-2018.tar.gz"

df = pd.read_csv(gun_violence)

df.count()

"""Now, I am setting my csv file as my main data frame. """

from google.colab import drive
drive.mount('/content/drive')

"""Mounting"""

killed_by_state1 = df.groupby("state", as_index=False)
killed_by_state1

"""Now, I am grouping by state to see the data from each individual state. 

"""

killed_by_state3 = df.groupby("state", as_index=False)["n_killed"].sum()
killed_by_state3.drop(8)

"""Now I am grouping the states by the total amount of deaths, and removing the District of Columbia in order to graph these on a cloropleth map later. """

killed_by_state = df.groupby("state", as_index=False)["n_killed"].sum()
killed_by_state

from sklearn import preprocessing
x_array = list(killed_by_state3['n_killed'])
normalized_arr = preprocessing.normalize([x_array])
list(normalized_arr)


list4 = [0.15380051, 0.02184295, 0.08949881, 0.06323819, 0.45502045, 0.06511979,
  0.0278968,  0.01775251, 0.03755023, 0.31979053, 0.20092237, 0.00515395,
  0.01358026, 0.27888614, 0.13154852, 0.0223338,  0.04434036, 0.08720816,
  0.17826134, 0.00916258, 0.13833865, 0.03861375, 0.12991235, 0.03771385,
  0.09620713, 0.17474356, 0.01259855, 0.01840698, 0.06536522, 0.00719917,
  0.09555266, 0.04049535, 0.13948398, 0.18202454, 0.00564481, 0.20517643,
  0.07698206, 0.03648672, 0.19593204, 0.00515395, 0.13171214, 0.00736279,
  0.14921922, 0.41280712, 0.02307008, 0.0046631,  0.11935901, 0.06978289,
  0.02740594, 0.07051917, 0.00597204]


killed_by_state3["Normalized Number"] = list4
killed_by_state3.drop(8)

"""In this code box, I am using a library to normalize the total death values for each state, creating a list for those values, and removing the District of Columbia. 

"""

killed_by_state3



type(killed_by_state3["Normalized Number"])

"""Checking to make sure the normalized values were numeric."""

import plotly.express as px  # Be sure to import express
fig = px.choropleth(killed_by_state3,  # Input Pandas DataFrame
                    locations="state",  # DataFrame column with locations
                    color="n_killed",  # DataFrame column with color values
                    hover_name="state", # DataFrame column hover info
                    locationmode = 'USA-states') # Set to plot as US States
fig.update_layout(
    title_text = 'State Rankings', # Create a Title
    geo_scope='usa',  # Plot only the USA instead of globe
    )
fig.show()  #

"""A failed attempt at a cloropleth map.

Making a table by total deaths per state
"""

# Set the width and height of the figure
plt.figure(figsize=(10,10))

# Add title
plt.title("Total Number of People Killed, per State")

# Bar chart showing average arrival delay for Spirit Airlines flights by month
sns.barplot(x=killed_by_state["n_killed"], y=killed_by_state["state"])

# Add label for vertical axis
plt.ylabel("State")
plt.xlabel("Total Number Killed")

"""Making a graph of total deaths per state"""

df['year'] = pd.DatetimeIndex(df['date']).year
df['month'] = pd.DatetimeIndex(df['date']).month
df['month']

"""Adding year and month columns that correspond to numeric values."""

killed_over_time = df.groupby("year", as_index=False)["n_killed"].sum()

killed_over_time

""" Making a graph of the total number of deaths per year."""

df

killed_over_time1= killed_over_time.drop(0).drop(5)

"""Dropping the 2013 and 2018 years, because these years were not complete within the original data set."""

# Set the width and height of the figure
plt.figure(figsize=(10,6))

# Add title
plt.title("Total Number of Deaths, by Year")

# Bar chart showing average arrival delay for Spirit Airlines flights by month
sns.barplot(x= killed_over_time1['year'], y= killed_over_time1['n_killed'])

# Add label for vertical axis
plt.ylabel("Total Deaths")

"""Graphing total deaths per year, over time"""

# Set the width and height of the figure
plt.figure(figsize=(14,7))

# Add title
plt.title("Average Arrival Delay for Each Airline, by Month")

# Heatmap showing average arrival delay for each airline by month
sns.heatmap(data=killed_over_time, annot=True)

# Add label for horizontal axis
plt.xlabel("Airline")

"""Tried to make a heatmap but it didn't work out"""

sns.scatterplot(x=df['month'], y=df['n_killed'])

"""Here, I created a scatterplot of total people killed per month."""

df['n_injured'].mean()

"""Now, I am looking at the average number of deaths."""

killed_by_month = df.groupby("month", as_index=False)["n_injured"].mean()

killed_by_month

"""Now, I am grouping to show a average injuries per month."""

plt.plot(killed_by_month['month'],killed_by_month['n_injured'])
plt.title('Average Gun Injuries Per Month')
plt.xlabel('Average Number of Injuries')
plt.ylabel('Month')
plt.show()

"""Now, I am creating a line graph showing the average deaths per month in the data set. This will show what month has the highest rate. """

killed_by_state3['state']

"""Checking the state data. """

import altair as alt
from vega_datasets import data

states = alt.topo_feature(data.stage3.cvs, 'states')

variable_list = ['n_killed', 'Normalized Number']

alt.Chart(states).mark_geoshape().encode(
    color='population:Q'
).transform_lookup(
    lookup='state',
    from_=alt.LookupData(killed_by_state3, 'state', list(killed_by_state3.columns))
).properties(
    width=500,
    height=300
).project(
    type='albersUsa'
)



"""making a visualization of total number of injuries over time. """